@import '00-vendor/all';
@import '01-mixins/all';
@import '02-settings/all';

/* Baseline background
----------------------------------------------- */


.baseline-button {
  position: fixed;
  bottom: baseline(1);
  right: baseline(1);
  z-index: 10000;
}

.u-baseline {

  &::before {
    content: '';
    display: block;
    background-image: linear-gradient(
                    rgba(#000000, .1) 1px,
                    transparent 1px,
                    transparent 50%,
                    rgba(#000000, .1) calc(50% + 2px),
                    transparent calc(50% + 1px),
                    transparent 100%);
    background-position: left top;
    position: fixed;
    height: 100%;
    width: 100%;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  label,
  ol,
  ul,
  dl,
  p,
  blockquote,
  small,
  .alpha,
  .beta,
  .gamma,
  .delta,
  .epsilon,
  .small,
  .xsmall,
  .base {
    // background: rgba(#FF0000, .15) !important;
  }

  .placeholder {
    background: grey;
    padding: baseline(1);
  }

  @include layout($grid-small);

  $switch: get-breakpoint('m');

  @include susy-breakpoint('(min-width:0px)', $grid-small) {
    .a-layout {
      @include show-grid;
    }
  }

  @include susy-breakpoint('(min-width: ' + $switch+ ')', $grid-large) {
    .a-layout {
      @include show-grid;
      background-size: 8.333333% !important;
    }
  }

}

/* Set base font-size
----------------------------------------------- */

@each $bp-name, $bp-size in $breakpoints {

  $bp-config: map-get($typographic-breakpoints, $bp-name);

  @if not $bp-config {
    // @warn 'No value found for `#{$bp-name}`. Please make sure it is defined in `$typographic-breakpoints` map.';
  }

  @if map-has-key($typographic-breakpoints, $bp-name) {

    $bp: map-get($breakpoints, $bp-name);
    $font-size: map-get($bp-config, 'font-size');
    $line-height: map-get($bp-config, 'line-height');

    @include respond-min($bp-name) {

      .u-baseline::before {
        background-size: 100% $line-height + rem;
      }

    }

  }

}