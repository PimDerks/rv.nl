/*------------------------------------*\
    #TYPOGRAPHY
\*------------------------------------*/

@font-face {
  font-family: 'roboto';
  src: url('../fonts/roboto_bold_macroman/Roboto-Bold-webfont.eot');
  src: url('../fonts/roboto_bold_macroman/Roboto-Bold-webfont.eot?#iefix') format('embedded-opentype'),
  url('../fonts/roboto_bold_macroman/Roboto-Bold-webfont.woff') format('woff'),
  url('../fonts/roboto_bold_macroman/Roboto-Bold-webfont.ttf') format('truetype'),
  url('../fonts/roboto_bold_macroman/Roboto-Bold-webfont.svg#robotobold') format('svg');
  font-weight: bold;
  font-style: normal;
}

@font-face {
  font-family: 'roboto';
  src: url('../fonts/roboto_light_macroman/Roboto-Light-webfont.eot');
  src: url('../fonts/roboto_light_macroman/Roboto-Light-webfont.eot?#iefix') format('embedded-opentype'),
  url('../fonts/roboto_light_macroman/Roboto-Light-webfont.woff') format('woff'),
  url('../fonts/roboto_light_macroman/Roboto-Light-webfont.ttf') format('truetype'),
  url('../fonts/roboto_light_macroman/Roboto-Light-webfont.svg#robotolight') format('svg');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'roboto';
  src: url('../fonts/roboto_regular_macroman/Roboto-Regular-webfont.eot');
  src: url('../fonts/roboto_regular_macroman/Roboto-Regular-webfont.eot?#iefix') format('embedded-opentype'),
  url('../fonts/roboto_regular_macroman/Roboto-Regular-webfont.woff') format('woff'),
  url('../fonts/roboto_regular_macroman/Roboto-Regular-webfont.ttf') format('truetype'),
  url('../fonts/roboto_regular_macroman/Roboto-Regular-webfont.svg#robotoregular') format('svg');
  font-weight: bolder;
  font-style: normal;
}

@font-face {
  font-family: 'trajan';
  src: url('../fonts/trajan.woff') format('woff');
  font-weight: normal;
  font-style: normal;
}

body {
  color: get-color('gamma');
  font-family: $font;
  font-weight: 100;
}

body {
  font-family: 'Muli', sans-serif;
  line-height: 1.5;
}

h1,
h2,
h3,
h4,
h5 {
  font-family: 'Trajan', serif;
  color: black;
  font-weight: bold;
  text-transform: uppercase;
}

.fjalla {
  font-family: 'Open Sans', serif !important;
  text-transform: uppercase;
}

h1 {
  text-transform: none;
}

h3,
h4,
h5 {
  text-transform: uppercase;
}

h1,
h2,
h3,
h4 {
  margin-bottom: 1.5rem;
  padding-bottom: 1.5rem;
  position: relative;
  &::after {
    content: '';
    border-top: .15rem solid #FFE400;
    display: block;
    position: absolute;
    bottom: 0;
    width: baseline(1);
  }
}

h3,
h4 {
  margin-top: 4.5rem;
  padding-bottom: 0;
  &::after {
    display: none;
  }
}

h1 {
  margin-bottom: 4.5rem;
  margin-top: 1.5rem;
}

h2 {
  margin-top: 3rem;
}

/* Basic vertical rhythm
----------------------------------------------- */

@each $bp-name, $bp-code in $breakpoints {
  @if map-has-key($typographic-breakpoints, $bp-name) {
    $scope: map-get($typographic-breakpoints, $bp-name);

    @include respond-min($bp-name) {
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p,
      blockquote,
      pre,
      dl,
      ol,
      ul,
      fieldset,
      legend,
      figure,
      table,
      caption,
      hr,
      address {
        margin-bottom: baseline(1);
      }
    }
  }}

/* Generate silent selectors for typographic scale.
----------------------------------------------- */

@for $i from 1 through length($breakpoints) {
  $bp: nth($breakpoints, $i);
  $bp-name: nth($bp, 1);
  $bp-code: nth($bp, 2);

  @if map-has-key($typographic-breakpoints, $bp-name) {
    $scope: map-get($typographic-breakpoints, $bp-name);

    // first breakpoint should be without media-query
    @if $i > 1 {

      @include respond-min($bp-name) {

        @each $scale in $typographic-scale-names {
          $scale-name: nth($scale, 1);
          $scale-scale: nth($scale, 2);
          $scale-extra-line-height: nth($scale-scale, 1);
          $scale-margin-bottom: nth($scale-scale, 2);

          %u-#{$scale-name} {
            @include calculate-scale($bp-name, $scale-name, $scale-extra-line-height);
            margin-bottom: baseline($scale-margin-bottom, $bp-name, $scale-name);
          }
        }

      }

    } @else {

      @each $scale in $typographic-scale-names {
        $scale-name: nth($scale, 1);
        $scale-scale: nth($scale, 2);
        $scale-extra-line-height: nth($scale-scale, 1);
        $scale-margin-bottom: nth($scale-scale, 2);

        %u-#{$scale-name} {
          @include calculate-scale($bp-name, $scale-name, $scale-extra-line-height);
          margin-bottom: baseline($scale-margin-bottom, $bp-name, $scale-name);
        }
      }

    }

  }

}

/* Headings
----------------------------------------------- */

h1,
h2,
h3,
h4,
h5,
.u-subheading-alpha,
.u-subheading-beta,
.u-subheading-gamma {
  color: get-color('beta');

  a {
    color: get-color('beta');
    text-decoration: none;

    &:focus,
    &:hover,
    &:active {
      text-decoration: underline;
    }

  }

}

h1,
.u-subheading-alpha {
  @extend %u-subheading-alpha;
  font-weight: 400;
}

h2,
.u-subheading-alpha {
  @extend %u-subheading-beta;
  font-weight: 400;
}

h3,
.u-subheading-beta {
  @extend %u-subheading-gamma;
  font-weight: 400;
}

h4,
.u-subheading-gamma {
  @extend %u-subheading-delta;
  font-weight: 400;
}

h5,
.u-subheading-delta {
  @extend %u-subheading-epsilon;
  font-weight: normal;
}

p {
  @extend %base;
}

small {
  @extend %small;
}

/* Set base font-sizes configured in $typographic-breakpoints.
----------------------------------------------- */

$base: 16; // browser default

@each $bp-name, $bp-size in $breakpoints {

  $bp-config: map-get($typographic-breakpoints, $bp-name);

  @if not $bp-config {
    // @warn 'No value found for `#{$bp-name}`. Please make sure it is defined in `$typographic-breakpoints` map.';
  }

  @if map-has-key($typographic-breakpoints, $bp-name) {

    $bp: map-get($breakpoints, $bp-name);
    $font-size: map-get($bp-config, 'font-size');
    $line-height: map-get($bp-config, 'line-height');

    @include respond-min($bp-name) {

      html {
        font-size: ($font-size/$base) * 100%;
        line-height: $line-height;
      }

    }

  }

}